
hoike-main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00000b46  00000bda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080016e  0080016e  00000c48  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006fb  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001c0  00000000  00000000  0000146b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000975  00000000  00000000  0000162b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e4  00000000  00000000  00001fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000390  00000000  00000000  00002384  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000848  00000000  00000000  00002714  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00002f5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	70 c1       	rjmp	.+736    	; 0x316 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e4       	ldi	r30, 0x46	; 70
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 36       	cpi	r26, 0x6E	; 110
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e6       	ldi	r26, 0x6E	; 110
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 37       	cpi	r26, 0x7E	; 126
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ca d4       	rcall	.+2452   	; 0xa58 <main>
  c4:	3e c5       	rjmp	.+2684   	; 0xb42 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCD_ClearScreen>:
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
		return UDR1;
	}
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	18 d0       	rcall	.+48     	; 0x104 <LCD_WriteCommand>
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <LCD_init>:
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	84 e6       	ldi	r24, 0x64	; 100
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	a7 d0       	rcall	.+334    	; 0x236 <delay_ms>
  e8:	88 e3       	ldi	r24, 0x38	; 56
  ea:	0c d0       	rcall	.+24     	; 0x104 <LCD_WriteCommand>
  ec:	86 e0       	ldi	r24, 0x06	; 6
  ee:	0a d0       	rcall	.+20     	; 0x104 <LCD_WriteCommand>
  f0:	8f e0       	ldi	r24, 0x0F	; 15
  f2:	08 d0       	rcall	.+16     	; 0x104 <LCD_WriteCommand>
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	06 d0       	rcall	.+12     	; 0x104 <LCD_WriteCommand>
  f8:	8a e0       	ldi	r24, 0x0A	; 10
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	9c d0       	rcall	.+312    	; 0x236 <delay_ms>
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <LCD_WriteCommand>:
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	1f 92       	push	r1
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	89 83       	std	Y+1, r24	; 0x01
 110:	8b e2       	ldi	r24, 0x2B	; 43
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	2b e2       	ldi	r18, 0x2B	; 43
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	f9 01       	movw	r30, r18
 11a:	20 81       	ld	r18, Z
 11c:	2f 7b       	andi	r18, 0xBF	; 191
 11e:	fc 01       	movw	r30, r24
 120:	20 83       	st	Z, r18
 122:	88 e2       	ldi	r24, 0x28	; 40
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	29 81       	ldd	r18, Y+1	; 0x01
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
 12c:	8b e2       	ldi	r24, 0x2B	; 43
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	2b e2       	ldi	r18, 0x2B	; 43
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	f9 01       	movw	r30, r18
 136:	20 81       	ld	r18, Z
 138:	20 68       	ori	r18, 0x80	; 128
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
 13e:	00 00       	nop
 140:	8b e2       	ldi	r24, 0x2B	; 43
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	2b e2       	ldi	r18, 0x2B	; 43
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	f9 01       	movw	r30, r18
 14a:	20 81       	ld	r18, Z
 14c:	2f 77       	andi	r18, 0x7F	; 127
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	6f d0       	rcall	.+222    	; 0x236 <delay_ms>
 158:	0f 90       	pop	r0
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <LCD_WriteData>:
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	1f 92       	push	r1
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	89 83       	std	Y+1, r24	; 0x01
 16c:	8b e2       	ldi	r24, 0x2B	; 43
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	2b e2       	ldi	r18, 0x2B	; 43
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	f9 01       	movw	r30, r18
 176:	20 81       	ld	r18, Z
 178:	20 64       	ori	r18, 0x40	; 64
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
 17e:	88 e2       	ldi	r24, 0x28	; 40
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	29 81       	ldd	r18, Y+1	; 0x01
 184:	fc 01       	movw	r30, r24
 186:	20 83       	st	Z, r18
 188:	8b e2       	ldi	r24, 0x2B	; 43
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	2b e2       	ldi	r18, 0x2B	; 43
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	20 81       	ld	r18, Z
 194:	20 68       	ori	r18, 0x80	; 128
 196:	fc 01       	movw	r30, r24
 198:	20 83       	st	Z, r18
 19a:	00 00       	nop
 19c:	8b e2       	ldi	r24, 0x2B	; 43
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	2b e2       	ldi	r18, 0x2B	; 43
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	f9 01       	movw	r30, r18
 1a6:	20 81       	ld	r18, Z
 1a8:	2f 77       	andi	r18, 0x7F	; 127
 1aa:	fc 01       	movw	r30, r24
 1ac:	20 83       	st	Z, r18
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	41 d0       	rcall	.+130    	; 0x236 <delay_ms>
 1b4:	0f 90       	pop	r0
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <LCD_DisplayString>:
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <LCD_DisplayString+0x6>
 1c2:	00 d0       	rcall	.+0      	; 0x1c4 <LCD_DisplayString+0x8>
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	8a 83       	std	Y+2, r24	; 0x02
 1ca:	7c 83       	std	Y+4, r23	; 0x04
 1cc:	6b 83       	std	Y+3, r22	; 0x03
 1ce:	7c df       	rcall	.-264    	; 0xc8 <LCD_ClearScreen>
 1d0:	8a 81       	ldd	r24, Y+2	; 0x02
 1d2:	89 83       	std	Y+1, r24	; 0x01
 1d4:	0f c0       	rjmp	.+30     	; 0x1f4 <LCD_DisplayString+0x38>
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	98 0f       	add	r25, r24
 1dc:	99 83       	std	Y+1, r25	; 0x01
 1de:	17 d0       	rcall	.+46     	; 0x20e <LCD_Cursor>
 1e0:	8b 81       	ldd	r24, Y+3	; 0x03
 1e2:	9c 81       	ldd	r25, Y+4	; 0x04
 1e4:	9c 01       	movw	r18, r24
 1e6:	2f 5f       	subi	r18, 0xFF	; 255
 1e8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ea:	3c 83       	std	Y+4, r19	; 0x04
 1ec:	2b 83       	std	Y+3, r18	; 0x03
 1ee:	fc 01       	movw	r30, r24
 1f0:	80 81       	ld	r24, Z
 1f2:	b6 df       	rcall	.-148    	; 0x160 <LCD_WriteData>
 1f4:	8b 81       	ldd	r24, Y+3	; 0x03
 1f6:	9c 81       	ldd	r25, Y+4	; 0x04
 1f8:	fc 01       	movw	r30, r24
 1fa:	80 81       	ld	r24, Z
 1fc:	88 23       	and	r24, r24
 1fe:	59 f7       	brne	.-42     	; 0x1d6 <LCD_DisplayString+0x1a>
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <LCD_Cursor>:
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	1f 92       	push	r1
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	89 83       	std	Y+1, r24	; 0x01
 21a:	89 81       	ldd	r24, Y+1	; 0x01
 21c:	81 31       	cpi	r24, 0x11	; 17
 21e:	20 f4       	brcc	.+8      	; 0x228 <LCD_Cursor+0x1a>
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	81 58       	subi	r24, 0x81	; 129
 224:	6f df       	rcall	.-290    	; 0x104 <LCD_WriteCommand>
 226:	03 c0       	rjmp	.+6      	; 0x22e <LCD_Cursor+0x20>
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	81 55       	subi	r24, 0x51	; 81
 22c:	6b df       	rcall	.-298    	; 0x104 <LCD_WriteCommand>
 22e:	0f 90       	pop	r0
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <delay_ms>:
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	00 d0       	rcall	.+0      	; 0x23c <delay_ms+0x6>
 23c:	00 d0       	rcall	.+0      	; 0x23e <delay_ms+0x8>
 23e:	00 d0       	rcall	.+0      	; 0x240 <delay_ms+0xa>
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
 244:	9e 83       	std	Y+6, r25	; 0x06
 246:	8d 83       	std	Y+5, r24	; 0x05
 248:	1a 82       	std	Y+2, r1	; 0x02
 24a:	19 82       	std	Y+1, r1	; 0x01
 24c:	14 c0       	rjmp	.+40     	; 0x276 <delay_ms+0x40>
 24e:	1c 82       	std	Y+4, r1	; 0x04
 250:	1b 82       	std	Y+3, r1	; 0x03
 252:	06 c0       	rjmp	.+12     	; 0x260 <delay_ms+0x2a>
 254:	00 00       	nop
 256:	8b 81       	ldd	r24, Y+3	; 0x03
 258:	9c 81       	ldd	r25, Y+4	; 0x04
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	9c 83       	std	Y+4, r25	; 0x04
 25e:	8b 83       	std	Y+3, r24	; 0x03
 260:	8b 81       	ldd	r24, Y+3	; 0x03
 262:	9c 81       	ldd	r25, Y+4	; 0x04
 264:	87 30       	cpi	r24, 0x07	; 7
 266:	23 e0       	ldi	r18, 0x03	; 3
 268:	92 07       	cpc	r25, r18
 26a:	a4 f3       	brlt	.-24     	; 0x254 <delay_ms+0x1e>
 26c:	89 81       	ldd	r24, Y+1	; 0x01
 26e:	9a 81       	ldd	r25, Y+2	; 0x02
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	9a 83       	std	Y+2, r25	; 0x02
 274:	89 83       	std	Y+1, r24	; 0x01
 276:	29 81       	ldd	r18, Y+1	; 0x01
 278:	3a 81       	ldd	r19, Y+2	; 0x02
 27a:	8d 81       	ldd	r24, Y+5	; 0x05
 27c:	9e 81       	ldd	r25, Y+6	; 0x06
 27e:	28 17       	cp	r18, r24
 280:	39 07       	cpc	r19, r25
 282:	2c f3       	brlt	.-54     	; 0x24e <delay_ms+0x18>
 284:	26 96       	adiw	r28, 0x06	; 6
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	f8 94       	cli
 28a:	de bf       	out	0x3e, r29	; 62
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	cd bf       	out	0x3d, r28	; 61
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <TimerOn>:
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	81 e8       	ldi	r24, 0x81	; 129
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	2b e0       	ldi	r18, 0x0B	; 11
 2a4:	fc 01       	movw	r30, r24
 2a6:	20 83       	st	Z, r18
 2a8:	88 e8       	ldi	r24, 0x88	; 136
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	2d e7       	ldi	r18, 0x7D	; 125
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	fc 01       	movw	r30, r24
 2b2:	31 83       	std	Z+1, r19	; 0x01
 2b4:	20 83       	st	Z, r18
 2b6:	8f e6       	ldi	r24, 0x6F	; 111
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	22 e0       	ldi	r18, 0x02	; 2
 2bc:	fc 01       	movw	r30, r24
 2be:	20 83       	st	Z, r18
 2c0:	84 e8       	ldi	r24, 0x84	; 132
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	fc 01       	movw	r30, r24
 2c6:	11 82       	std	Z+1, r1	; 0x01
 2c8:	10 82       	st	Z, r1
 2ca:	80 91 00 01 	lds	r24, 0x0100
 2ce:	90 91 01 01 	lds	r25, 0x0101
 2d2:	a0 91 02 01 	lds	r26, 0x0102
 2d6:	b0 91 03 01 	lds	r27, 0x0103
 2da:	80 93 6f 01 	sts	0x016F, r24
 2de:	90 93 70 01 	sts	0x0170, r25
 2e2:	a0 93 71 01 	sts	0x0171, r26
 2e6:	b0 93 72 01 	sts	0x0172, r27
 2ea:	8f e5       	ldi	r24, 0x5F	; 95
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	2f e5       	ldi	r18, 0x5F	; 95
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	f9 01       	movw	r30, r18
 2f4:	20 81       	ld	r18, Z
 2f6:	20 68       	ori	r18, 0x80	; 128
 2f8:	fc 01       	movw	r30, r24
 2fa:	20 83       	st	Z, r18
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <TimerISR>:
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	80 93 6e 01 	sts	0x016E, r24
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <__vector_13>:
 316:	1f 92       	push	r1
 318:	0f 92       	push	r0
 31a:	00 90 5f 00 	lds	r0, 0x005F
 31e:	0f 92       	push	r0
 320:	11 24       	eor	r1, r1
 322:	00 90 5b 00 	lds	r0, 0x005B
 326:	0f 92       	push	r0
 328:	2f 93       	push	r18
 32a:	3f 93       	push	r19
 32c:	4f 93       	push	r20
 32e:	5f 93       	push	r21
 330:	6f 93       	push	r22
 332:	7f 93       	push	r23
 334:	8f 93       	push	r24
 336:	9f 93       	push	r25
 338:	af 93       	push	r26
 33a:	bf 93       	push	r27
 33c:	ef 93       	push	r30
 33e:	ff 93       	push	r31
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	cd b7       	in	r28, 0x3d	; 61
 346:	de b7       	in	r29, 0x3e	; 62
 348:	80 91 6f 01 	lds	r24, 0x016F
 34c:	90 91 70 01 	lds	r25, 0x0170
 350:	a0 91 71 01 	lds	r26, 0x0171
 354:	b0 91 72 01 	lds	r27, 0x0172
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	a1 09       	sbc	r26, r1
 35c:	b1 09       	sbc	r27, r1
 35e:	80 93 6f 01 	sts	0x016F, r24
 362:	90 93 70 01 	sts	0x0170, r25
 366:	a0 93 71 01 	sts	0x0171, r26
 36a:	b0 93 72 01 	sts	0x0172, r27
 36e:	80 91 6f 01 	lds	r24, 0x016F
 372:	90 91 70 01 	lds	r25, 0x0170
 376:	a0 91 71 01 	lds	r26, 0x0171
 37a:	b0 91 72 01 	lds	r27, 0x0172
 37e:	00 97       	sbiw	r24, 0x00	; 0
 380:	a1 05       	cpc	r26, r1
 382:	b1 05       	cpc	r27, r1
 384:	89 f4       	brne	.+34     	; 0x3a8 <__vector_13+0x92>
 386:	bd df       	rcall	.-134    	; 0x302 <TimerISR>
 388:	80 91 00 01 	lds	r24, 0x0100
 38c:	90 91 01 01 	lds	r25, 0x0101
 390:	a0 91 02 01 	lds	r26, 0x0102
 394:	b0 91 03 01 	lds	r27, 0x0103
 398:	80 93 6f 01 	sts	0x016F, r24
 39c:	90 93 70 01 	sts	0x0170, r25
 3a0:	a0 93 71 01 	sts	0x0171, r26
 3a4:	b0 93 72 01 	sts	0x0172, r27
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	ff 91       	pop	r31
 3ae:	ef 91       	pop	r30
 3b0:	bf 91       	pop	r27
 3b2:	af 91       	pop	r26
 3b4:	9f 91       	pop	r25
 3b6:	8f 91       	pop	r24
 3b8:	7f 91       	pop	r23
 3ba:	6f 91       	pop	r22
 3bc:	5f 91       	pop	r21
 3be:	4f 91       	pop	r20
 3c0:	3f 91       	pop	r19
 3c2:	2f 91       	pop	r18
 3c4:	0f 90       	pop	r0
 3c6:	00 92 5b 00 	sts	0x005B, r0
 3ca:	0f 90       	pop	r0
 3cc:	00 92 5f 00 	sts	0x005F, r0
 3d0:	0f 90       	pop	r0
 3d2:	1f 90       	pop	r1
 3d4:	18 95       	reti

000003d6 <TimerSet>:
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	00 d0       	rcall	.+0      	; 0x3dc <TimerSet+0x6>
 3dc:	00 d0       	rcall	.+0      	; 0x3de <TimerSet+0x8>
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
 3e2:	69 83       	std	Y+1, r22	; 0x01
 3e4:	7a 83       	std	Y+2, r23	; 0x02
 3e6:	8b 83       	std	Y+3, r24	; 0x03
 3e8:	9c 83       	std	Y+4, r25	; 0x04
 3ea:	89 81       	ldd	r24, Y+1	; 0x01
 3ec:	9a 81       	ldd	r25, Y+2	; 0x02
 3ee:	ab 81       	ldd	r26, Y+3	; 0x03
 3f0:	bc 81       	ldd	r27, Y+4	; 0x04
 3f2:	80 93 00 01 	sts	0x0100, r24
 3f6:	90 93 01 01 	sts	0x0101, r25
 3fa:	a0 93 02 01 	sts	0x0102, r26
 3fe:	b0 93 03 01 	sts	0x0103, r27
 402:	80 91 00 01 	lds	r24, 0x0100
 406:	90 91 01 01 	lds	r25, 0x0101
 40a:	a0 91 02 01 	lds	r26, 0x0102
 40e:	b0 91 03 01 	lds	r27, 0x0103
 412:	80 93 6f 01 	sts	0x016F, r24
 416:	90 93 70 01 	sts	0x0170, r25
 41a:	a0 93 71 01 	sts	0x0171, r26
 41e:	b0 93 72 01 	sts	0x0172, r27
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
 428:	0f 90       	pop	r0
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <ADC_init>:
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	cd b7       	in	r28, 0x3d	; 61
 436:	de b7       	in	r29, 0x3e	; 62
 438:	8a e7       	ldi	r24, 0x7A	; 122
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	2a e7       	ldi	r18, 0x7A	; 122
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	f9 01       	movw	r30, r18
 442:	20 81       	ld	r18, Z
 444:	20 6e       	ori	r18, 0xE0	; 224
 446:	fc 01       	movw	r30, r24
 448:	20 83       	st	Z, r18
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	08 95       	ret

00000450 <GetBit>:
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	00 d0       	rcall	.+0      	; 0x456 <GetBit+0x6>
 456:	cd b7       	in	r28, 0x3d	; 61
 458:	de b7       	in	r29, 0x3e	; 62
 45a:	89 83       	std	Y+1, r24	; 0x01
 45c:	6a 83       	std	Y+2, r22	; 0x02
 45e:	8a 81       	ldd	r24, Y+2	; 0x02
 460:	28 2f       	mov	r18, r24
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	02 2e       	mov	r0, r18
 46a:	02 c0       	rjmp	.+4      	; 0x470 <GetBit+0x20>
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	0a 94       	dec	r0
 472:	e2 f7       	brpl	.-8      	; 0x46c <GetBit+0x1c>
 474:	98 2f       	mov	r25, r24
 476:	89 81       	ldd	r24, Y+1	; 0x01
 478:	89 23       	and	r24, r25
 47a:	0f 90       	pop	r0
 47c:	0f 90       	pop	r0
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	08 95       	ret

00000484 <initUSART>:
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	1f 92       	push	r1
 48a:	cd b7       	in	r28, 0x3d	; 61
 48c:	de b7       	in	r29, 0x3e	; 62
 48e:	89 83       	std	Y+1, r24	; 0x01
 490:	89 81       	ldd	r24, Y+1	; 0x01
 492:	81 30       	cpi	r24, 0x01	; 1
 494:	e1 f0       	breq	.+56     	; 0x4ce <initUSART+0x4a>
 496:	81 ec       	ldi	r24, 0xC1	; 193
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	21 ec       	ldi	r18, 0xC1	; 193
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	f9 01       	movw	r30, r18
 4a0:	20 81       	ld	r18, Z
 4a2:	28 61       	ori	r18, 0x18	; 24
 4a4:	fc 01       	movw	r30, r24
 4a6:	20 83       	st	Z, r18
 4a8:	82 ec       	ldi	r24, 0xC2	; 194
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	22 ec       	ldi	r18, 0xC2	; 194
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	f9 01       	movw	r30, r18
 4b2:	20 81       	ld	r18, Z
 4b4:	26 60       	ori	r18, 0x06	; 6
 4b6:	fc 01       	movw	r30, r24
 4b8:	20 83       	st	Z, r18
 4ba:	84 ec       	ldi	r24, 0xC4	; 196
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	23 e3       	ldi	r18, 0x33	; 51
 4c0:	fc 01       	movw	r30, r24
 4c2:	20 83       	st	Z, r18
 4c4:	85 ec       	ldi	r24, 0xC5	; 197
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	fc 01       	movw	r30, r24
 4ca:	10 82       	st	Z, r1
 4cc:	1b c0       	rjmp	.+54     	; 0x504 <initUSART+0x80>
 4ce:	89 ec       	ldi	r24, 0xC9	; 201
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	29 ec       	ldi	r18, 0xC9	; 201
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	f9 01       	movw	r30, r18
 4d8:	20 81       	ld	r18, Z
 4da:	28 61       	ori	r18, 0x18	; 24
 4dc:	fc 01       	movw	r30, r24
 4de:	20 83       	st	Z, r18
 4e0:	8a ec       	ldi	r24, 0xCA	; 202
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	2a ec       	ldi	r18, 0xCA	; 202
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	f9 01       	movw	r30, r18
 4ea:	20 81       	ld	r18, Z
 4ec:	26 60       	ori	r18, 0x06	; 6
 4ee:	fc 01       	movw	r30, r24
 4f0:	20 83       	st	Z, r18
 4f2:	8c ec       	ldi	r24, 0xCC	; 204
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	23 e3       	ldi	r18, 0x33	; 51
 4f8:	fc 01       	movw	r30, r24
 4fa:	20 83       	st	Z, r18
 4fc:	8d ec       	ldi	r24, 0xCD	; 205
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	fc 01       	movw	r30, r24
 502:	10 82       	st	Z, r1
 504:	0f 90       	pop	r0
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <USART_IsSendReady>:
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	1f 92       	push	r1
 512:	cd b7       	in	r28, 0x3d	; 61
 514:	de b7       	in	r29, 0x3e	; 62
 516:	89 83       	std	Y+1, r24	; 0x01
 518:	89 81       	ldd	r24, Y+1	; 0x01
 51a:	81 30       	cpi	r24, 0x01	; 1
 51c:	31 f0       	breq	.+12     	; 0x52a <USART_IsSendReady+0x1e>
 51e:	80 ec       	ldi	r24, 0xC0	; 192
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	fc 01       	movw	r30, r24
 524:	80 81       	ld	r24, Z
 526:	80 72       	andi	r24, 0x20	; 32
 528:	05 c0       	rjmp	.+10     	; 0x534 <USART_IsSendReady+0x28>
 52a:	88 ec       	ldi	r24, 0xC8	; 200
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	fc 01       	movw	r30, r24
 530:	80 81       	ld	r24, Z
 532:	80 72       	andi	r24, 0x20	; 32
 534:	0f 90       	pop	r0
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	08 95       	ret

0000053c <USART_Flush>:
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
 540:	1f 92       	push	r1
 542:	cd b7       	in	r28, 0x3d	; 61
 544:	de b7       	in	r29, 0x3e	; 62
 546:	89 83       	std	Y+1, r24	; 0x01
 548:	89 81       	ldd	r24, Y+1	; 0x01
 54a:	81 30       	cpi	r24, 0x01	; 1
 54c:	71 f0       	breq	.+28     	; 0x56a <USART_Flush+0x2e>
 54e:	06 c0       	rjmp	.+12     	; 0x55c <USART_Flush+0x20>
 550:	86 ec       	ldi	r24, 0xC6	; 198
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	fc 01       	movw	r30, r24
 556:	80 81       	ld	r24, Z
 558:	80 93 7b 01 	sts	0x017B, r24
 55c:	80 ec       	ldi	r24, 0xC0	; 192
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	fc 01       	movw	r30, r24
 562:	80 81       	ld	r24, Z
 564:	88 23       	and	r24, r24
 566:	a4 f3       	brlt	.-24     	; 0x550 <USART_Flush+0x14>
 568:	0d c0       	rjmp	.+26     	; 0x584 <USART_Flush+0x48>
 56a:	06 c0       	rjmp	.+12     	; 0x578 <USART_Flush+0x3c>
 56c:	8e ec       	ldi	r24, 0xCE	; 206
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	fc 01       	movw	r30, r24
 572:	80 81       	ld	r24, Z
 574:	80 93 7b 01 	sts	0x017B, r24
 578:	88 ec       	ldi	r24, 0xC8	; 200
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	fc 01       	movw	r30, r24
 57e:	80 81       	ld	r24, Z
 580:	88 23       	and	r24, r24
 582:	a4 f3       	brlt	.-24     	; 0x56c <USART_Flush+0x30>
 584:	0f 90       	pop	r0
 586:	df 91       	pop	r29
 588:	cf 91       	pop	r28
 58a:	08 95       	ret

0000058c <USART_Send>:
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
 590:	00 d0       	rcall	.+0      	; 0x592 <USART_Send+0x6>
 592:	cd b7       	in	r28, 0x3d	; 61
 594:	de b7       	in	r29, 0x3e	; 62
 596:	89 83       	std	Y+1, r24	; 0x01
 598:	6a 83       	std	Y+2, r22	; 0x02
 59a:	8a 81       	ldd	r24, Y+2	; 0x02
 59c:	81 30       	cpi	r24, 0x01	; 1
 59e:	89 f0       	breq	.+34     	; 0x5c2 <USART_Send+0x36>
 5a0:	00 00       	nop
 5a2:	80 ec       	ldi	r24, 0xC0	; 192
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	fc 01       	movw	r30, r24
 5a8:	80 81       	ld	r24, Z
 5aa:	88 2f       	mov	r24, r24
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	80 72       	andi	r24, 0x20	; 32
 5b0:	99 27       	eor	r25, r25
 5b2:	00 97       	sbiw	r24, 0x00	; 0
 5b4:	b1 f3       	breq	.-20     	; 0x5a2 <USART_Send+0x16>
 5b6:	86 ec       	ldi	r24, 0xC6	; 198
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	29 81       	ldd	r18, Y+1	; 0x01
 5bc:	fc 01       	movw	r30, r24
 5be:	20 83       	st	Z, r18
 5c0:	10 c0       	rjmp	.+32     	; 0x5e2 <USART_Send+0x56>
 5c2:	00 00       	nop
 5c4:	88 ec       	ldi	r24, 0xC8	; 200
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	fc 01       	movw	r30, r24
 5ca:	80 81       	ld	r24, Z
 5cc:	88 2f       	mov	r24, r24
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	80 72       	andi	r24, 0x20	; 32
 5d2:	99 27       	eor	r25, r25
 5d4:	00 97       	sbiw	r24, 0x00	; 0
 5d6:	b1 f3       	breq	.-20     	; 0x5c4 <USART_Send+0x38>
 5d8:	8e ec       	ldi	r24, 0xCE	; 206
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	29 81       	ldd	r18, Y+1	; 0x01
 5de:	fc 01       	movw	r30, r24
 5e0:	20 83       	st	Z, r18
 5e2:	0f 90       	pop	r0
 5e4:	0f 90       	pop	r0
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <getRed>:

#define BLUEBTN 4
#define REDBTN 3
#define GREENBTN 2

unsigned char getRed(unsigned short input) {
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	00 d0       	rcall	.+0      	; 0x5f2 <getRed+0x6>
 5f2:	00 d0       	rcall	.+0      	; 0x5f4 <getRed+0x8>
 5f4:	cd b7       	in	r28, 0x3d	; 61
 5f6:	de b7       	in	r29, 0x3e	; 62
 5f8:	9a 83       	std	Y+2, r25	; 0x02
 5fa:	89 83       	std	Y+1, r24	; 0x01
	return input % 257;
 5fc:	89 81       	ldd	r24, Y+1	; 0x01
 5fe:	9a 81       	ldd	r25, Y+2	; 0x02
 600:	21 e0       	ldi	r18, 0x01	; 1
 602:	31 e0       	ldi	r19, 0x01	; 1
 604:	b9 01       	movw	r22, r18
 606:	68 d2       	rcall	.+1232   	; 0xad8 <__udivmodhi4>
}
 608:	0f 90       	pop	r0
 60a:	0f 90       	pop	r0
 60c:	0f 90       	pop	r0
 60e:	0f 90       	pop	r0
 610:	df 91       	pop	r29
 612:	cf 91       	pop	r28
 614:	08 95       	ret

00000616 <getBlue>:

unsigned char getBlue(unsigned short input) {
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	00 d0       	rcall	.+0      	; 0x61c <getBlue+0x6>
 61c:	00 d0       	rcall	.+0      	; 0x61e <getBlue+0x8>
 61e:	cd b7       	in	r28, 0x3d	; 61
 620:	de b7       	in	r29, 0x3e	; 62
 622:	9a 83       	std	Y+2, r25	; 0x02
 624:	89 83       	std	Y+1, r24	; 0x01
	return (input >> 1) % 257;
 626:	89 81       	ldd	r24, Y+1	; 0x01
 628:	9a 81       	ldd	r25, Y+2	; 0x02
 62a:	96 95       	lsr	r25
 62c:	87 95       	ror	r24
 62e:	21 e0       	ldi	r18, 0x01	; 1
 630:	31 e0       	ldi	r19, 0x01	; 1
 632:	b9 01       	movw	r22, r18
 634:	51 d2       	rcall	.+1186   	; 0xad8 <__udivmodhi4>
}
 636:	0f 90       	pop	r0
 638:	0f 90       	pop	r0
 63a:	0f 90       	pop	r0
 63c:	0f 90       	pop	r0
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	08 95       	ret

00000644 <getGreen>:

unsigned char getGreen(unsigned short input) {
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
 648:	00 d0       	rcall	.+0      	; 0x64a <getGreen+0x6>
 64a:	00 d0       	rcall	.+0      	; 0x64c <getGreen+0x8>
 64c:	cd b7       	in	r28, 0x3d	; 61
 64e:	de b7       	in	r29, 0x3e	; 62
 650:	9a 83       	std	Y+2, r25	; 0x02
 652:	89 83       	std	Y+1, r24	; 0x01
	return (input >> 2) % 257;
 654:	89 81       	ldd	r24, Y+1	; 0x01
 656:	9a 81       	ldd	r25, Y+2	; 0x02
 658:	96 95       	lsr	r25
 65a:	87 95       	ror	r24
 65c:	96 95       	lsr	r25
 65e:	87 95       	ror	r24
 660:	21 e0       	ldi	r18, 0x01	; 1
 662:	31 e0       	ldi	r19, 0x01	; 1
 664:	b9 01       	movw	r22, r18
 666:	38 d2       	rcall	.+1136   	; 0xad8 <__udivmodhi4>
}
 668:	0f 90       	pop	r0
 66a:	0f 90       	pop	r0
 66c:	0f 90       	pop	r0
 66e:	0f 90       	pop	r0
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28
 674:	08 95       	ret

00000676 <reverse>:

unsigned char reverse(unsigned char b) {
 676:	cf 93       	push	r28
 678:	df 93       	push	r29
 67a:	1f 92       	push	r1
 67c:	cd b7       	in	r28, 0x3d	; 61
 67e:	de b7       	in	r29, 0x3e	; 62
 680:	89 83       	std	Y+1, r24	; 0x01
	b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 682:	89 81       	ldd	r24, Y+1	; 0x01
 684:	82 95       	swap	r24
 686:	8f 70       	andi	r24, 0x0F	; 15
 688:	28 2f       	mov	r18, r24
 68a:	89 81       	ldd	r24, Y+1	; 0x01
 68c:	88 2f       	mov	r24, r24
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	82 95       	swap	r24
 692:	92 95       	swap	r25
 694:	90 7f       	andi	r25, 0xF0	; 240
 696:	98 27       	eor	r25, r24
 698:	80 7f       	andi	r24, 0xF0	; 240
 69a:	98 27       	eor	r25, r24
 69c:	82 2b       	or	r24, r18
 69e:	89 83       	std	Y+1, r24	; 0x01
	b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 6a0:	89 81       	ldd	r24, Y+1	; 0x01
 6a2:	88 2f       	mov	r24, r24
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	8c 7c       	andi	r24, 0xCC	; 204
 6a8:	99 27       	eor	r25, r25
 6aa:	95 95       	asr	r25
 6ac:	87 95       	ror	r24
 6ae:	95 95       	asr	r25
 6b0:	87 95       	ror	r24
 6b2:	28 2f       	mov	r18, r24
 6b4:	89 81       	ldd	r24, Y+1	; 0x01
 6b6:	88 2f       	mov	r24, r24
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	83 73       	andi	r24, 0x33	; 51
 6bc:	99 27       	eor	r25, r25
 6be:	88 0f       	add	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	88 0f       	add	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	82 2b       	or	r24, r18
 6c8:	89 83       	std	Y+1, r24	; 0x01
	b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
 6ca:	89 81       	ldd	r24, Y+1	; 0x01
 6cc:	88 2f       	mov	r24, r24
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	8a 7a       	andi	r24, 0xAA	; 170
 6d2:	99 27       	eor	r25, r25
 6d4:	95 95       	asr	r25
 6d6:	87 95       	ror	r24
 6d8:	28 2f       	mov	r18, r24
 6da:	89 81       	ldd	r24, Y+1	; 0x01
 6dc:	88 2f       	mov	r24, r24
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	85 75       	andi	r24, 0x55	; 85
 6e2:	99 27       	eor	r25, r25
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	82 2b       	or	r24, r18
 6ea:	89 83       	std	Y+1, r24	; 0x01
	return b;
 6ec:	89 81       	ldd	r24, Y+1	; 0x01
}
 6ee:	0f 90       	pop	r0
 6f0:	df 91       	pop	r29
 6f2:	cf 91       	pop	r28
 6f4:	08 95       	ret

000006f6 <Tick>:

void Tick() {
 6f6:	0f 93       	push	r16
 6f8:	1f 93       	push	r17
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
 6fe:	cd b7       	in	r28, 0x3d	; 61
 700:	de b7       	in	r29, 0x3e	; 62
 702:	c0 5a       	subi	r28, 0xA0	; 160
 704:	d1 09       	sbc	r29, r1
 706:	0f b6       	in	r0, 0x3f	; 63
 708:	f8 94       	cli
 70a:	de bf       	out	0x3e, r29	; 62
 70c:	0f be       	out	0x3f, r0	; 63
 70e:	cd bf       	out	0x3d, r28	; 61
	microphone = ADC;
 710:	88 e7       	ldi	r24, 0x78	; 120
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	fc 01       	movw	r30, r24
 716:	80 81       	ld	r24, Z
 718:	91 81       	ldd	r25, Z+1	; 0x01
 71a:	90 93 78 01 	sts	0x0178, r25
 71e:	80 93 77 01 	sts	0x0177, r24

	button = ~PIND;
 722:	89 e2       	ldi	r24, 0x29	; 41
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	fc 01       	movw	r30, r24
 728:	80 81       	ld	r24, Z
 72a:	80 95       	com	r24
 72c:	80 93 73 01 	sts	0x0173, r24
	
	switch (State) {
 730:	80 91 7c 01 	lds	r24, 0x017C
 734:	88 2f       	mov	r24, r24
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	81 30       	cpi	r24, 0x01	; 1
 73a:	91 05       	cpc	r25, r1
 73c:	09 f4       	brne	.+2      	; 0x740 <Tick+0x4a>
 73e:	4d c0       	rjmp	.+154    	; 0x7da <Tick+0xe4>
 740:	82 30       	cpi	r24, 0x02	; 2
 742:	91 05       	cpc	r25, r1
 744:	1c f4       	brge	.+6      	; 0x74c <Tick+0x56>
 746:	00 97       	sbiw	r24, 0x00	; 0
 748:	51 f0       	breq	.+20     	; 0x75e <Tick+0x68>
 74a:	7a c1       	rjmp	.+756    	; 0xa40 <Tick+0x34a>
 74c:	82 30       	cpi	r24, 0x02	; 2
 74e:	91 05       	cpc	r25, r1
 750:	09 f4       	brne	.+2      	; 0x754 <Tick+0x5e>
 752:	9f c0       	rjmp	.+318    	; 0x892 <Tick+0x19c>
 754:	83 30       	cpi	r24, 0x03	; 3
 756:	91 05       	cpc	r25, r1
 758:	09 f4       	brne	.+2      	; 0x75c <Tick+0x66>
 75a:	f0 c0       	rjmp	.+480    	; 0x93c <Tick+0x246>
 75c:	71 c1       	rjmp	.+738    	; 0xa40 <Tick+0x34a>
		case Init:
			i = 0;
 75e:	10 92 76 01 	sts	0x0176, r1
			update = 1;
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	80 93 19 01 	sts	0x0119, r24
			State = UserInput;
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	80 93 7c 01 	sts	0x017C, r24
			PORTA = 0x00;
 76e:	82 e2       	ldi	r24, 0x22	; 34
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	fc 01       	movw	r30, r24
 774:	10 82       	st	Z, r1
			PORTB = 0x00;
 776:	85 e2       	ldi	r24, 0x25	; 37
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	fc 01       	movw	r30, r24
 77c:	10 82       	st	Z, r1
			while (!USART_IsSendReady(0)) {};
 77e:	00 00       	nop
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	c4 de       	rcall	.-632    	; 0x50c <USART_IsSendReady>
 784:	88 23       	and	r24, r24
 786:	e1 f3       	breq	.-8      	; 0x780 <Tick+0x8a>
			USART_Send(0, 0);
 788:	60 e0       	ldi	r22, 0x00	; 0
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	ff de       	rcall	.-514    	; 0x58c <USART_Send>
			while (!USART_IsSendReady(0)) {};
 78e:	00 00       	nop
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	bc de       	rcall	.-648    	; 0x50c <USART_IsSendReady>
 794:	88 23       	and	r24, r24
 796:	e1 f3       	breq	.-8      	; 0x790 <Tick+0x9a>
			USART_Send(0, 0);
 798:	60 e0       	ldi	r22, 0x00	; 0
 79a:	80 e0       	ldi	r24, 0x00	; 0
 79c:	f7 de       	rcall	.-530    	; 0x58c <USART_Send>
			while (!USART_IsSendReady(0)) {};
 79e:	00 00       	nop
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	b4 de       	rcall	.-664    	; 0x50c <USART_IsSendReady>
 7a4:	88 23       	and	r24, r24
 7a6:	e1 f3       	breq	.-8      	; 0x7a0 <Tick+0xaa>
			USART_Send(0, 0);
 7a8:	60 e0       	ldi	r22, 0x00	; 0
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	ef de       	rcall	.-546    	; 0x58c <USART_Send>
			learnPosition = eeprom_read_byte((uint8_t*) 10);
 7ae:	8a e0       	ldi	r24, 0x0A	; 10
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	b1 d1       	rcall	.+866    	; 0xb16 <__eerd_byte_m1284>
 7b4:	80 93 74 01 	sts	0x0174, r24
			notePosition = eeprom_read_byte(20);
 7b8:	84 e1       	ldi	r24, 0x14	; 20
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	ac d1       	rcall	.+856    	; 0xb16 <__eerd_byte_m1284>
 7be:	80 93 75 01 	sts	0x0175, r24
			if (learnPosition < 0 || learnPosition > songLength) {
 7c2:	90 91 74 01 	lds	r25, 0x0174
 7c6:	80 91 09 01 	lds	r24, 0x0109
 7ca:	89 17       	cp	r24, r25
 7cc:	28 f4       	brcc	.+10     	; 0x7d8 <Tick+0xe2>
				learnPosition = 0;
 7ce:	10 92 74 01 	sts	0x0174, r1
				notePosition = 0;
 7d2:	10 92 75 01 	sts	0x0175, r1
			}
			
			break;
 7d6:	34 c1       	rjmp	.+616    	; 0xa40 <Tick+0x34a>
 7d8:	33 c1       	rjmp	.+614    	; 0xa40 <Tick+0x34a>
		case UserInput:
			
			if (i <= 10 && update) {
 7da:	80 91 76 01 	lds	r24, 0x0176
 7de:	8b 30       	cpi	r24, 0x0B	; 11
 7e0:	50 f4       	brcc	.+20     	; 0x7f6 <Tick+0x100>
 7e2:	80 91 19 01 	lds	r24, 0x0119
 7e6:	88 23       	and	r24, r24
 7e8:	31 f0       	breq	.+12     	; 0x7f6 <Tick+0x100>
				LCD_DisplayString(1, "Hoike [Home]");
 7ea:	6b e1       	ldi	r22, 0x1B	; 27
 7ec:	71 e0       	ldi	r23, 0x01	; 1
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	e5 dc       	rcall	.-1590   	; 0x1bc <LCD_DisplayString>
				update = 0;
 7f2:	10 92 19 01 	sts	0x0119, r1
			}
			if (i >= 40 && update) {
 7f6:	80 91 76 01 	lds	r24, 0x0176
 7fa:	88 32       	cpi	r24, 0x28	; 40
 7fc:	90 f0       	brcs	.+36     	; 0x822 <Tick+0x12c>
 7fe:	80 91 19 01 	lds	r24, 0x0119
 802:	88 23       	and	r24, r24
 804:	71 f0       	breq	.+28     	; 0x822 <Tick+0x12c>
				LCD_DisplayString(1, "(G) Learn       (B) Visualize");
 806:	68 e2       	ldi	r22, 0x28	; 40
 808:	71 e0       	ldi	r23, 0x01	; 1
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	d7 dc       	rcall	.-1618   	; 0x1bc <LCD_DisplayString>
				if (i >= 20) {
 80e:	80 91 76 01 	lds	r24, 0x0176
 812:	84 31       	cpi	r24, 0x14	; 20
 814:	10 f0       	brcs	.+4      	; 0x81a <Tick+0x124>
					i = 0;
 816:	10 92 76 01 	sts	0x0176, r1
				}
				update = 0;
 81a:	10 92 19 01 	sts	0x0119, r1
				i = 0;
 81e:	10 92 76 01 	sts	0x0176, r1
			}
			i++;
 822:	80 91 76 01 	lds	r24, 0x0176
 826:	8f 5f       	subi	r24, 0xFF	; 255
 828:	80 93 76 01 	sts	0x0176, r24
			if (i >= 10) {
 82c:	80 91 76 01 	lds	r24, 0x0176
 830:	8a 30       	cpi	r24, 0x0A	; 10
 832:	18 f0       	brcs	.+6      	; 0x83a <Tick+0x144>
				update = 1;
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	80 93 19 01 	sts	0x0119, r24
			}
			if (GetBit(button, BLUEBTN) == 0) {
 83a:	80 91 73 01 	lds	r24, 0x0173
 83e:	64 e0       	ldi	r22, 0x04	; 4
 840:	07 de       	rcall	.-1010   	; 0x450 <GetBit>
 842:	88 23       	and	r24, r24
 844:	41 f4       	brne	.+16     	; 0x856 <Tick+0x160>
				State = Visualize;
 846:	82 e0       	ldi	r24, 0x02	; 2
 848:	80 93 7c 01 	sts	0x017C, r24
				i = 0;
 84c:	10 92 76 01 	sts	0x0176, r1
				update = 1;
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	80 93 19 01 	sts	0x0119, r24
			}
			if (GetBit(button, REDBTN) == 0) {
 856:	80 91 73 01 	lds	r24, 0x0173
 85a:	63 e0       	ldi	r22, 0x03	; 3
 85c:	f9 dd       	rcall	.-1038   	; 0x450 <GetBit>
 85e:	88 23       	and	r24, r24
 860:	41 f4       	brne	.+16     	; 0x872 <Tick+0x17c>
				State = UserInput;
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	80 93 7c 01 	sts	0x017C, r24
				i = 0;
 868:	10 92 76 01 	sts	0x0176, r1
				update = 1;
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	80 93 19 01 	sts	0x0119, r24
			}
			if (GetBit(button, GREENBTN) == 0) {
 872:	80 91 73 01 	lds	r24, 0x0173
 876:	62 e0       	ldi	r22, 0x02	; 2
 878:	eb dd       	rcall	.-1066   	; 0x450 <GetBit>
 87a:	88 23       	and	r24, r24
 87c:	49 f4       	brne	.+18     	; 0x890 <Tick+0x19a>
				State = Learn;
 87e:	83 e0       	ldi	r24, 0x03	; 3
 880:	80 93 7c 01 	sts	0x017C, r24
				i = 0;
 884:	10 92 76 01 	sts	0x0176, r1
				update = 1;
 888:	81 e0       	ldi	r24, 0x01	; 1
 88a:	80 93 19 01 	sts	0x0119, r24
			}
			break;
 88e:	d8 c0       	rjmp	.+432    	; 0xa40 <Tick+0x34a>
 890:	d7 c0       	rjmp	.+430    	; 0xa40 <Tick+0x34a>
		case Visualize:
			if (update) {
 892:	80 91 19 01 	lds	r24, 0x0119
 896:	88 23       	and	r24, r24
 898:	31 f0       	breq	.+12     	; 0x8a6 <Tick+0x1b0>
				LCD_DisplayString(1, "Hoike [Visual]  (R) Home");
 89a:	66 e4       	ldi	r22, 0x46	; 70
 89c:	71 e0       	ldi	r23, 0x01	; 1
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	8d dc       	rcall	.-1766   	; 0x1bc <LCD_DisplayString>
				update = 0;
 8a2:	10 92 19 01 	sts	0x0119, r1
			}
			
			PORTA = (char)(microphone);
 8a6:	82 e2       	ldi	r24, 0x22	; 34
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	20 91 77 01 	lds	r18, 0x0177
 8ae:	30 91 78 01 	lds	r19, 0x0178
 8b2:	fc 01       	movw	r30, r24
 8b4:	20 83       	st	Z, r18
			PORTB = reverse((char)(microphone));
 8b6:	05 e2       	ldi	r16, 0x25	; 37
 8b8:	10 e0       	ldi	r17, 0x00	; 0
 8ba:	80 91 77 01 	lds	r24, 0x0177
 8be:	90 91 78 01 	lds	r25, 0x0178
 8c2:	d9 de       	rcall	.-590    	; 0x676 <reverse>
 8c4:	f8 01       	movw	r30, r16
 8c6:	80 83       	st	Z, r24
			redVal = getRed(microphone);
 8c8:	80 91 77 01 	lds	r24, 0x0177
 8cc:	90 91 78 01 	lds	r25, 0x0178
 8d0:	8d de       	rcall	.-742    	; 0x5ec <getRed>
 8d2:	80 93 1a 01 	sts	0x011A, r24
			greenVal = getGreen(microphone);
 8d6:	80 91 77 01 	lds	r24, 0x0177
 8da:	90 91 78 01 	lds	r25, 0x0178
 8de:	b2 de       	rcall	.-668    	; 0x644 <getGreen>
 8e0:	80 93 79 01 	sts	0x0179, r24
			blueVal = getBlue(microphone);
 8e4:	80 91 77 01 	lds	r24, 0x0177
 8e8:	90 91 78 01 	lds	r25, 0x0178
 8ec:	94 de       	rcall	.-728    	; 0x616 <getBlue>
 8ee:	80 93 7a 01 	sts	0x017A, r24
			while (!USART_IsSendReady(0)) {};
 8f2:	00 00       	nop
 8f4:	80 e0       	ldi	r24, 0x00	; 0
 8f6:	0a de       	rcall	.-1004   	; 0x50c <USART_IsSendReady>
 8f8:	88 23       	and	r24, r24
 8fa:	e1 f3       	breq	.-8      	; 0x8f4 <Tick+0x1fe>
			USART_Send(redVal, 0);
 8fc:	80 91 1a 01 	lds	r24, 0x011A
 900:	60 e0       	ldi	r22, 0x00	; 0
 902:	44 de       	rcall	.-888    	; 0x58c <USART_Send>
			while (!USART_IsSendReady(0)) {};
 904:	00 00       	nop
 906:	80 e0       	ldi	r24, 0x00	; 0
 908:	01 de       	rcall	.-1022   	; 0x50c <USART_IsSendReady>
 90a:	88 23       	and	r24, r24
 90c:	e1 f3       	breq	.-8      	; 0x906 <Tick+0x210>
			USART_Send(greenVal, 0);
 90e:	80 91 79 01 	lds	r24, 0x0179
 912:	60 e0       	ldi	r22, 0x00	; 0
 914:	3b de       	rcall	.-906    	; 0x58c <USART_Send>
			while (!USART_IsSendReady(0)) {};
 916:	00 00       	nop
 918:	80 e0       	ldi	r24, 0x00	; 0
 91a:	f8 dd       	rcall	.-1040   	; 0x50c <USART_IsSendReady>
 91c:	88 23       	and	r24, r24
 91e:	e1 f3       	breq	.-8      	; 0x918 <Tick+0x222>
			USART_Send(blueVal, 0);
 920:	80 91 7a 01 	lds	r24, 0x017A
 924:	60 e0       	ldi	r22, 0x00	; 0
 926:	32 de       	rcall	.-924    	; 0x58c <USART_Send>
			if (GetBit(button, 3) == 0) {
 928:	80 91 73 01 	lds	r24, 0x0173
 92c:	63 e0       	ldi	r22, 0x03	; 3
 92e:	90 dd       	rcall	.-1248   	; 0x450 <GetBit>
 930:	88 23       	and	r24, r24
 932:	19 f4       	brne	.+6      	; 0x93a <Tick+0x244>
				State = Init;
 934:	10 92 7c 01 	sts	0x017C, r1
			}
			break;
 938:	83 c0       	rjmp	.+262    	; 0xa40 <Tick+0x34a>
 93a:	82 c0       	rjmp	.+260    	; 0xa40 <Tick+0x34a>
		case Learn:
			{}
			unsigned char* str[80];
			strcpy(str, "Hoike [Learn] ");
 93c:	2f e0       	ldi	r18, 0x0F	; 15
 93e:	ef e5       	ldi	r30, 0x5F	; 95
 940:	f1 e0       	ldi	r31, 0x01	; 1
 942:	ce 01       	movw	r24, r28
 944:	01 96       	adiw	r24, 0x01	; 1
 946:	dc 01       	movw	r26, r24
 948:	01 90       	ld	r0, Z+
 94a:	0d 92       	st	X+, r0
 94c:	2a 95       	dec	r18
 94e:	e1 f7       	brne	.-8      	; 0x948 <Tick+0x252>
			strcat(str, &songNotes[notePosition]);
 950:	80 91 75 01 	lds	r24, 0x0175
 954:	88 2f       	mov	r24, r24
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	86 5f       	subi	r24, 0xF6	; 246
 95a:	9e 4f       	sbci	r25, 0xFE	; 254
 95c:	bc 01       	movw	r22, r24
 95e:	ce 01       	movw	r24, r28
 960:	01 96       	adiw	r24, 0x01	; 1
 962:	ce d0       	rcall	.+412    	; 0xb00 <strcat>
			if (update) {
 964:	80 91 19 01 	lds	r24, 0x0119
 968:	88 23       	and	r24, r24
 96a:	39 f0       	breq	.+14     	; 0x97a <Tick+0x284>
				LCD_DisplayString(1, str);
 96c:	ce 01       	movw	r24, r28
 96e:	01 96       	adiw	r24, 0x01	; 1
 970:	bc 01       	movw	r22, r24
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	23 dc       	rcall	.-1978   	; 0x1bc <LCD_DisplayString>
				update = 0;
 976:	10 92 19 01 	sts	0x0119, r1
			}
	
			PORTA = song[learnPosition];
 97a:	82 e2       	ldi	r24, 0x22	; 34
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	20 91 74 01 	lds	r18, 0x0174
 982:	22 2f       	mov	r18, r18
 984:	30 e0       	ldi	r19, 0x00	; 0
 986:	2c 5f       	subi	r18, 0xFC	; 252
 988:	3e 4f       	sbci	r19, 0xFE	; 254
 98a:	f9 01       	movw	r30, r18
 98c:	20 81       	ld	r18, Z
 98e:	fc 01       	movw	r30, r24
 990:	20 83       	st	Z, r18
			if (GetBit(button, BLUEBTN) == 0) {
 992:	80 91 73 01 	lds	r24, 0x0173
 996:	64 e0       	ldi	r22, 0x04	; 4
 998:	5b dd       	rcall	.-1354   	; 0x450 <GetBit>
 99a:	88 23       	and	r24, r24
 99c:	01 f5       	brne	.+64     	; 0x9de <Tick+0x2e8>

				if (learnPosition > 0) {
 99e:	80 91 74 01 	lds	r24, 0x0174
 9a2:	88 23       	and	r24, r24
 9a4:	b1 f0       	breq	.+44     	; 0x9d2 <Tick+0x2dc>
					learnPosition--;
 9a6:	80 91 74 01 	lds	r24, 0x0174
 9aa:	81 50       	subi	r24, 0x01	; 1
 9ac:	80 93 74 01 	sts	0x0174, r24
					eeprom_write_byte( (uint8_t *) 10, learnPosition);
 9b0:	80 91 74 01 	lds	r24, 0x0174
 9b4:	68 2f       	mov	r22, r24
 9b6:	8a e0       	ldi	r24, 0x0A	; 10
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	b5 d0       	rcall	.+362    	; 0xb26 <__eewr_byte_m1284>
					notePosition -= 3;
 9bc:	80 91 75 01 	lds	r24, 0x0175
 9c0:	83 50       	subi	r24, 0x03	; 3
 9c2:	80 93 75 01 	sts	0x0175, r24
					eeprom_write_byte( (uint8_t *) 20, notePosition);
 9c6:	80 91 75 01 	lds	r24, 0x0175
 9ca:	68 2f       	mov	r22, r24
 9cc:	84 e1       	ldi	r24, 0x14	; 20
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	aa d0       	rcall	.+340    	; 0xb26 <__eewr_byte_m1284>
				}
				State = Learn;
 9d2:	83 e0       	ldi	r24, 0x03	; 3
 9d4:	80 93 7c 01 	sts	0x017C, r24
				update = 1;
 9d8:	81 e0       	ldi	r24, 0x01	; 1
 9da:	80 93 19 01 	sts	0x0119, r24
			}
			if (GetBit(button, REDBTN) == 0) {
 9de:	80 91 73 01 	lds	r24, 0x0173
 9e2:	63 e0       	ldi	r22, 0x03	; 3
 9e4:	35 dd       	rcall	.-1430   	; 0x450 <GetBit>
 9e6:	88 23       	and	r24, r24
 9e8:	11 f4       	brne	.+4      	; 0x9ee <Tick+0x2f8>
				State = Init;
 9ea:	10 92 7c 01 	sts	0x017C, r1
			}
			if (GetBit(button, GREENBTN) == 0) {
 9ee:	80 91 73 01 	lds	r24, 0x0173
 9f2:	62 e0       	ldi	r22, 0x02	; 2
 9f4:	2d dd       	rcall	.-1446   	; 0x450 <GetBit>
 9f6:	88 23       	and	r24, r24
 9f8:	11 f5       	brne	.+68     	; 0xa3e <Tick+0x348>
				if (learnPosition < songLength) {
 9fa:	90 91 74 01 	lds	r25, 0x0174
 9fe:	80 91 09 01 	lds	r24, 0x0109
 a02:	98 17       	cp	r25, r24
 a04:	b0 f4       	brcc	.+44     	; 0xa32 <Tick+0x33c>
					learnPosition++;
 a06:	80 91 74 01 	lds	r24, 0x0174
 a0a:	8f 5f       	subi	r24, 0xFF	; 255
 a0c:	80 93 74 01 	sts	0x0174, r24
					eeprom_write_byte( (uint8_t *) 10, learnPosition);
 a10:	80 91 74 01 	lds	r24, 0x0174
 a14:	68 2f       	mov	r22, r24
 a16:	8a e0       	ldi	r24, 0x0A	; 10
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	85 d0       	rcall	.+266    	; 0xb26 <__eewr_byte_m1284>
					notePosition += 3;
 a1c:	80 91 75 01 	lds	r24, 0x0175
 a20:	8d 5f       	subi	r24, 0xFD	; 253
 a22:	80 93 75 01 	sts	0x0175, r24
					eeprom_write_byte( (uint8_t *) 20, notePosition);
 a26:	80 91 75 01 	lds	r24, 0x0175
 a2a:	68 2f       	mov	r22, r24
 a2c:	84 e1       	ldi	r24, 0x14	; 20
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	7a d0       	rcall	.+244    	; 0xb26 <__eewr_byte_m1284>
				}
				State = Learn;
 a32:	83 e0       	ldi	r24, 0x03	; 3
 a34:	80 93 7c 01 	sts	0x017C, r24
				update = 1;
 a38:	81 e0       	ldi	r24, 0x01	; 1
 a3a:	80 93 19 01 	sts	0x0119, r24
			}
			
			break;
 a3e:	00 00       	nop
	}
}
 a40:	c0 56       	subi	r28, 0x60	; 96
 a42:	df 4f       	sbci	r29, 0xFF	; 255
 a44:	0f b6       	in	r0, 0x3f	; 63
 a46:	f8 94       	cli
 a48:	de bf       	out	0x3e, r29	; 62
 a4a:	0f be       	out	0x3f, r0	; 63
 a4c:	cd bf       	out	0x3d, r28	; 61
 a4e:	df 91       	pop	r29
 a50:	cf 91       	pop	r28
 a52:	1f 91       	pop	r17
 a54:	0f 91       	pop	r16
 a56:	08 95       	ret

00000a58 <main>:

int main(void)
{
 a58:	cf 93       	push	r28
 a5a:	df 93       	push	r29
 a5c:	cd b7       	in	r28, 0x3d	; 61
 a5e:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFE;
 a60:	81 e2       	ldi	r24, 0x21	; 33
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	2e ef       	ldi	r18, 0xFE	; 254
 a66:	fc 01       	movw	r30, r24
 a68:	20 83       	st	Z, r18
	PORTA = 0x01;
 a6a:	82 e2       	ldi	r24, 0x22	; 34
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	21 e0       	ldi	r18, 0x01	; 1
 a70:	fc 01       	movw	r30, r24
 a72:	20 83       	st	Z, r18
	
	DDRB = 0xFF;
 a74:	84 e2       	ldi	r24, 0x24	; 36
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	2f ef       	ldi	r18, 0xFF	; 255
 a7a:	fc 01       	movw	r30, r24
 a7c:	20 83       	st	Z, r18
	PORTB = 0x00;
 a7e:	85 e2       	ldi	r24, 0x25	; 37
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	fc 01       	movw	r30, r24
 a84:	10 82       	st	Z, r1
	
	DDRC = 0xFF;
 a86:	87 e2       	ldi	r24, 0x27	; 39
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	2f ef       	ldi	r18, 0xFF	; 255
 a8c:	fc 01       	movw	r30, r24
 a8e:	20 83       	st	Z, r18
	PORTC = 0x00;
 a90:	88 e2       	ldi	r24, 0x28	; 40
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	fc 01       	movw	r30, r24
 a96:	10 82       	st	Z, r1
	
	DDRD = 0xFF;
 a98:	8a e2       	ldi	r24, 0x2A	; 42
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	2f ef       	ldi	r18, 0xFF	; 255
 a9e:	fc 01       	movw	r30, r24
 aa0:	20 83       	st	Z, r18
	PORTD = 0x00;
 aa2:	8b e2       	ldi	r24, 0x2B	; 43
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	fc 01       	movw	r30, r24
 aa8:	10 82       	st	Z, r1
	
	ADC_init();
 aaa:	c2 dc       	rcall	.-1660   	; 0x430 <ADC_init>
	TimerSet(100);
 aac:	64 e6       	ldi	r22, 0x64	; 100
 aae:	70 e0       	ldi	r23, 0x00	; 0
 ab0:	80 e0       	ldi	r24, 0x00	; 0
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	90 dc       	rcall	.-1760   	; 0x3d6 <TimerSet>
	TimerOn();
 ab6:	ef db       	rcall	.-2082   	; 0x296 <TimerOn>
	LCD_init();
 ab8:	10 db       	rcall	.-2528   	; 0xda <LCD_init>
	initUSART(0);
 aba:	80 e0       	ldi	r24, 0x00	; 0
 abc:	e3 dc       	rcall	.-1594   	; 0x484 <initUSART>
	USART_Flush(0);
 abe:	80 e0       	ldi	r24, 0x00	; 0
 ac0:	3d dd       	rcall	.-1414   	; 0x53c <USART_Flush>
	
	State = Init;
 ac2:	10 92 7c 01 	sts	0x017C, r1
	
    while(1)                                                                                                                                                                                          
    {
		Tick();
 ac6:	17 de       	rcall	.-978    	; 0x6f6 <Tick>
		while (!TimerFlag);
 ac8:	00 00       	nop
 aca:	80 91 6e 01 	lds	r24, 0x016E
 ace:	88 23       	and	r24, r24
 ad0:	e1 f3       	breq	.-8      	; 0xaca <main+0x72>
		TimerFlag = 0;
 ad2:	10 92 6e 01 	sts	0x016E, r1
    }
 ad6:	f7 cf       	rjmp	.-18     	; 0xac6 <main+0x6e>

00000ad8 <__udivmodhi4>:
 ad8:	aa 1b       	sub	r26, r26
 ada:	bb 1b       	sub	r27, r27
 adc:	51 e1       	ldi	r21, 0x11	; 17
 ade:	07 c0       	rjmp	.+14     	; 0xaee <__udivmodhi4_ep>

00000ae0 <__udivmodhi4_loop>:
 ae0:	aa 1f       	adc	r26, r26
 ae2:	bb 1f       	adc	r27, r27
 ae4:	a6 17       	cp	r26, r22
 ae6:	b7 07       	cpc	r27, r23
 ae8:	10 f0       	brcs	.+4      	; 0xaee <__udivmodhi4_ep>
 aea:	a6 1b       	sub	r26, r22
 aec:	b7 0b       	sbc	r27, r23

00000aee <__udivmodhi4_ep>:
 aee:	88 1f       	adc	r24, r24
 af0:	99 1f       	adc	r25, r25
 af2:	5a 95       	dec	r21
 af4:	a9 f7       	brne	.-22     	; 0xae0 <__udivmodhi4_loop>
 af6:	80 95       	com	r24
 af8:	90 95       	com	r25
 afa:	bc 01       	movw	r22, r24
 afc:	cd 01       	movw	r24, r26
 afe:	08 95       	ret

00000b00 <strcat>:
 b00:	fb 01       	movw	r30, r22
 b02:	dc 01       	movw	r26, r24
 b04:	0d 90       	ld	r0, X+
 b06:	00 20       	and	r0, r0
 b08:	e9 f7       	brne	.-6      	; 0xb04 <strcat+0x4>
 b0a:	11 97       	sbiw	r26, 0x01	; 1
 b0c:	01 90       	ld	r0, Z+
 b0e:	0d 92       	st	X+, r0
 b10:	00 20       	and	r0, r0
 b12:	e1 f7       	brne	.-8      	; 0xb0c <strcat+0xc>
 b14:	08 95       	ret

00000b16 <__eerd_byte_m1284>:
 b16:	f9 99       	sbic	0x1f, 1	; 31
 b18:	fe cf       	rjmp	.-4      	; 0xb16 <__eerd_byte_m1284>
 b1a:	92 bd       	out	0x22, r25	; 34
 b1c:	81 bd       	out	0x21, r24	; 33
 b1e:	f8 9a       	sbi	0x1f, 0	; 31
 b20:	99 27       	eor	r25, r25
 b22:	80 b5       	in	r24, 0x20	; 32
 b24:	08 95       	ret

00000b26 <__eewr_byte_m1284>:
 b26:	26 2f       	mov	r18, r22

00000b28 <__eewr_r18_m1284>:
 b28:	f9 99       	sbic	0x1f, 1	; 31
 b2a:	fe cf       	rjmp	.-4      	; 0xb28 <__eewr_r18_m1284>
 b2c:	1f ba       	out	0x1f, r1	; 31
 b2e:	92 bd       	out	0x22, r25	; 34
 b30:	81 bd       	out	0x21, r24	; 33
 b32:	20 bd       	out	0x20, r18	; 32
 b34:	0f b6       	in	r0, 0x3f	; 63
 b36:	f8 94       	cli
 b38:	fa 9a       	sbi	0x1f, 2	; 31
 b3a:	f9 9a       	sbi	0x1f, 1	; 31
 b3c:	0f be       	out	0x3f, r0	; 63
 b3e:	01 96       	adiw	r24, 0x01	; 1
 b40:	08 95       	ret

00000b42 <_exit>:
 b42:	f8 94       	cli

00000b44 <__stop_program>:
 b44:	ff cf       	rjmp	.-2      	; 0xb44 <__stop_program>
