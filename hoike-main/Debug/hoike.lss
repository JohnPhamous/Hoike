
hoike.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  0000046a  000004fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800182  00800182  00000580  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a2  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000027c  00000000  00000000  00000df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000052e  00000000  00000000  0000106e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  0000159c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c5  00000000  00000000  00001708  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003d5  00000000  00000000  000019cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001da2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	ca c0       	rjmp	.+404    	; 0x1ca <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e6       	ldi	r30, 0x6A	; 106
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 38       	cpi	r26, 0x82	; 130
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e8       	ldi	r26, 0x82	; 130
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 38       	cpi	r26, 0x8F	; 143
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	9b d1       	rcall	.+822    	; 0x3fa <main>
  c4:	d0 c1       	rjmp	.+928    	; 0x466 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number)
{
	return ( port & (0x01 << number) );
}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	9c f4       	brge	.+38     	; 0xf4 <delay_ms+0x2c>
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	77 e0       	ldi	r23, 0x07	; 7
  d4:	63 e0       	ldi	r22, 0x03	; 3
  d6:	0b c0       	rjmp	.+22     	; 0xee <delay_ms+0x26>
  d8:	00 00       	nop
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	31 09       	sbc	r19, r1
  de:	21 15       	cp	r18, r1
  e0:	31 05       	cpc	r19, r1
  e2:	d1 f7       	brne	.-12     	; 0xd8 <delay_ms+0x10>
  e4:	4f 5f       	subi	r20, 0xFF	; 255
  e6:	5f 4f       	sbci	r21, 0xFF	; 255
  e8:	48 17       	cp	r20, r24
  ea:	59 07       	cpc	r21, r25
  ec:	19 f0       	breq	.+6      	; 0xf4 <delay_ms+0x2c>
  ee:	27 2f       	mov	r18, r23
  f0:	36 2f       	mov	r19, r22
  f2:	f2 cf       	rjmp	.-28     	; 0xd8 <delay_ms+0x10>
  f4:	08 95       	ret

000000f6 <LCD_WriteCommand>:
  f6:	5e 98       	cbi	0x0b, 6	; 11
  f8:	88 b9       	out	0x08, r24	; 8
  fa:	5f 9a       	sbi	0x0b, 7	; 11
  fc:	00 00       	nop
  fe:	5f 98       	cbi	0x0b, 7	; 11
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	e1 cf       	rjmp	.-62     	; 0xc8 <delay_ms>
 106:	08 95       	ret

00000108 <LCD_ClearScreen>:
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	f5 cf       	rjmp	.-22     	; 0xf6 <LCD_WriteCommand>
 10c:	08 95       	ret

0000010e <LCD_Cursor>:
 10e:	81 31       	cpi	r24, 0x11	; 17
 110:	18 f4       	brcc	.+6      	; 0x118 <LCD_Cursor+0xa>
 112:	81 58       	subi	r24, 0x81	; 129
 114:	f0 cf       	rjmp	.-32     	; 0xf6 <LCD_WriteCommand>
 116:	08 95       	ret
 118:	81 55       	subi	r24, 0x51	; 81
 11a:	ed cf       	rjmp	.-38     	; 0xf6 <LCD_WriteCommand>
 11c:	08 95       	ret

0000011e <LCD_init>:
 11e:	84 e6       	ldi	r24, 0x64	; 100
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	d2 df       	rcall	.-92     	; 0xc8 <delay_ms>
 124:	88 e3       	ldi	r24, 0x38	; 56
 126:	e7 df       	rcall	.-50     	; 0xf6 <LCD_WriteCommand>
 128:	86 e0       	ldi	r24, 0x06	; 6
 12a:	e5 df       	rcall	.-54     	; 0xf6 <LCD_WriteCommand>
 12c:	8f e0       	ldi	r24, 0x0F	; 15
 12e:	e3 df       	rcall	.-58     	; 0xf6 <LCD_WriteCommand>
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	e1 df       	rcall	.-62     	; 0xf6 <LCD_WriteCommand>
 134:	8a e0       	ldi	r24, 0x0A	; 10
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	c7 cf       	rjmp	.-114    	; 0xc8 <delay_ms>
 13a:	08 95       	ret

0000013c <LCD_WriteData>:
 13c:	5e 9a       	sbi	0x0b, 6	; 11
 13e:	88 b9       	out	0x08, r24	; 8
 140:	5f 9a       	sbi	0x0b, 7	; 11
 142:	00 00       	nop
 144:	5f 98       	cbi	0x0b, 7	; 11
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	be cf       	rjmp	.-132    	; 0xc8 <delay_ms>
 14c:	08 95       	ret

0000014e <LCD_DisplayString>:
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	18 2f       	mov	r17, r24
 158:	eb 01       	movw	r28, r22
 15a:	d6 df       	rcall	.-84     	; 0x108 <LCD_ClearScreen>
 15c:	88 81       	ld	r24, Y
 15e:	88 23       	and	r24, r24
 160:	59 f0       	breq	.+22     	; 0x178 <LCD_DisplayString+0x2a>
 162:	01 e0       	ldi	r16, 0x01	; 1
 164:	01 0f       	add	r16, r17
 166:	81 2f       	mov	r24, r17
 168:	d2 df       	rcall	.-92     	; 0x10e <LCD_Cursor>
 16a:	89 91       	ld	r24, Y+
 16c:	e7 df       	rcall	.-50     	; 0x13c <LCD_WriteData>
 16e:	88 81       	ld	r24, Y
 170:	88 23       	and	r24, r24
 172:	11 f0       	breq	.+4      	; 0x178 <LCD_DisplayString+0x2a>
 174:	10 2f       	mov	r17, r16
 176:	f5 cf       	rjmp	.-22     	; 0x162 <LCD_DisplayString+0x14>
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	08 95       	ret

00000182 <TimerOn>:
 182:	8b e0       	ldi	r24, 0x0B	; 11
 184:	80 93 81 00 	sts	0x0081, r24
 188:	8d e7       	ldi	r24, 0x7D	; 125
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	90 93 89 00 	sts	0x0089, r25
 190:	80 93 88 00 	sts	0x0088, r24
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	80 93 6f 00 	sts	0x006F, r24
 19a:	10 92 85 00 	sts	0x0085, r1
 19e:	10 92 84 00 	sts	0x0084, r1
 1a2:	80 91 10 01 	lds	r24, 0x0110
 1a6:	90 91 11 01 	lds	r25, 0x0111
 1aa:	a0 91 12 01 	lds	r26, 0x0112
 1ae:	b0 91 13 01 	lds	r27, 0x0113
 1b2:	80 93 88 01 	sts	0x0188, r24
 1b6:	90 93 89 01 	sts	0x0189, r25
 1ba:	a0 93 8a 01 	sts	0x018A, r26
 1be:	b0 93 8b 01 	sts	0x018B, r27
 1c2:	8f b7       	in	r24, 0x3f	; 63
 1c4:	80 68       	ori	r24, 0x80	; 128
 1c6:	8f bf       	out	0x3f, r24	; 63
 1c8:	08 95       	ret

000001ca <__vector_13>:
 1ca:	1f 92       	push	r1
 1cc:	0f 92       	push	r0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	0f 92       	push	r0
 1d2:	11 24       	eor	r1, r1
 1d4:	8f 93       	push	r24
 1d6:	9f 93       	push	r25
 1d8:	af 93       	push	r26
 1da:	bf 93       	push	r27
 1dc:	80 91 88 01 	lds	r24, 0x0188
 1e0:	90 91 89 01 	lds	r25, 0x0189
 1e4:	a0 91 8a 01 	lds	r26, 0x018A
 1e8:	b0 91 8b 01 	lds	r27, 0x018B
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	a1 09       	sbc	r26, r1
 1f0:	b1 09       	sbc	r27, r1
 1f2:	80 93 88 01 	sts	0x0188, r24
 1f6:	90 93 89 01 	sts	0x0189, r25
 1fa:	a0 93 8a 01 	sts	0x018A, r26
 1fe:	b0 93 8b 01 	sts	0x018B, r27
 202:	89 2b       	or	r24, r25
 204:	8a 2b       	or	r24, r26
 206:	8b 2b       	or	r24, r27
 208:	99 f4       	brne	.+38     	; 0x230 <__vector_13+0x66>
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	80 93 8c 01 	sts	0x018C, r24
 210:	80 91 10 01 	lds	r24, 0x0110
 214:	90 91 11 01 	lds	r25, 0x0111
 218:	a0 91 12 01 	lds	r26, 0x0112
 21c:	b0 91 13 01 	lds	r27, 0x0113
 220:	80 93 88 01 	sts	0x0188, r24
 224:	90 93 89 01 	sts	0x0189, r25
 228:	a0 93 8a 01 	sts	0x018A, r26
 22c:	b0 93 8b 01 	sts	0x018B, r27
 230:	bf 91       	pop	r27
 232:	af 91       	pop	r26
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <ADC_init>:
 242:	ea e7       	ldi	r30, 0x7A	; 122
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	80 6e       	ori	r24, 0xE0	; 224
 24a:	80 83       	st	Z, r24
 24c:	08 95       	ret

0000024e <Tick>:

#define BLUEBTN 0
#define REDBTN 3
#define GREENBTN 2

void Tick() {
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	c0 5a       	subi	r28, 0xA0	; 160
 258:	d1 09       	sbc	r29, r1
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	f8 94       	cli
 25e:	de bf       	out	0x3e, r29	; 62
 260:	0f be       	out	0x3f, r0	; 63
 262:	cd bf       	out	0x3d, r28	; 61
	microphone = ADC;
 264:	80 91 78 00 	lds	r24, 0x0078
 268:	90 91 79 00 	lds	r25, 0x0079
 26c:	90 93 87 01 	sts	0x0187, r25
 270:	80 93 86 01 	sts	0x0186, r24

	button = ~PIND;
 274:	89 b1       	in	r24, 0x09	; 9
 276:	80 95       	com	r24
 278:	80 93 85 01 	sts	0x0185, r24
	
	switch (State) {
 27c:	80 91 8d 01 	lds	r24, 0x018D
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	89 f0       	breq	.+34     	; 0x2a6 <Tick+0x58>
 284:	38 f0       	brcs	.+14     	; 0x294 <Tick+0x46>
 286:	82 30       	cpi	r24, 0x02	; 2
 288:	09 f4       	brne	.+2      	; 0x28c <Tick+0x3e>
 28a:	41 c0       	rjmp	.+130    	; 0x30e <Tick+0xc0>
 28c:	83 30       	cpi	r24, 0x03	; 3
 28e:	09 f4       	brne	.+2      	; 0x292 <Tick+0x44>
 290:	4c c0       	rjmp	.+152    	; 0x32a <Tick+0xdc>
 292:	a9 c0       	rjmp	.+338    	; 0x3e6 <Tick+0x198>
		case Init:
			learnPosition = 0;
 294:	10 92 84 01 	sts	0x0184, r1
			i = 0;
 298:	10 92 82 01 	sts	0x0182, r1
			State = UserInput;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	80 93 8d 01 	sts	0x018D, r24
			PORTB = 0x00;
 2a2:	15 b8       	out	0x05, r1	; 5
			break;
 2a4:	a0 c0       	rjmp	.+320    	; 0x3e6 <Tick+0x198>
		case UserInput:
			if (i <= 10) {
 2a6:	80 91 82 01 	lds	r24, 0x0182
 2aa:	8b 30       	cpi	r24, 0x0B	; 11
 2ac:	20 f4       	brcc	.+8      	; 0x2b6 <Tick+0x68>
				LCD_DisplayString(1, "Hoike [Home]");
 2ae:	64 e1       	ldi	r22, 0x14	; 20
 2b0:	71 e0       	ldi	r23, 0x01	; 1
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	4c df       	rcall	.-360    	; 0x14e <LCD_DisplayString>
			}
			if (i > 10 && i <= 20) {
 2b6:	80 91 82 01 	lds	r24, 0x0182
 2ba:	8b 50       	subi	r24, 0x0B	; 11
 2bc:	8a 30       	cpi	r24, 0x0A	; 10
 2be:	50 f4       	brcc	.+20     	; 0x2d4 <Tick+0x86>
				LCD_DisplayString(1, "(G) Learn       (B) Visualize");
 2c0:	61 e2       	ldi	r22, 0x21	; 33
 2c2:	71 e0       	ldi	r23, 0x01	; 1
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	43 df       	rcall	.-378    	; 0x14e <LCD_DisplayString>
				if (i >= 20) {
 2c8:	80 91 82 01 	lds	r24, 0x0182
 2cc:	84 31       	cpi	r24, 0x14	; 20
 2ce:	10 f0       	brcs	.+4      	; 0x2d4 <Tick+0x86>
					i = 0;
 2d0:	10 92 82 01 	sts	0x0182, r1
				}
			}
			i++;
 2d4:	80 91 82 01 	lds	r24, 0x0182
 2d8:	8f 5f       	subi	r24, 0xFF	; 255
 2da:	80 93 82 01 	sts	0x0182, r24
//Functionality - Gets bit from a PINx
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number)
{
	return ( port & (0x01 << number) );
 2de:	80 91 85 01 	lds	r24, 0x0185
				if (i >= 20) {
					i = 0;
				}
			}
			i++;
			if (GetBit(button, BLUEBTN) == 0) {
 2e2:	80 fd       	sbrc	r24, 0
 2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <Tick+0xa2>
				State = Visualize;
 2e6:	92 e0       	ldi	r25, 0x02	; 2
 2e8:	90 93 8d 01 	sts	0x018D, r25
				i = 0;
 2ec:	10 92 82 01 	sts	0x0182, r1
			}
			if (GetBit(button, REDBTN) == 0) {
 2f0:	83 fd       	sbrc	r24, 3
 2f2:	05 c0       	rjmp	.+10     	; 0x2fe <Tick+0xb0>
				State = UserInput;
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	90 93 8d 01 	sts	0x018D, r25
				i = 0;
 2fa:	10 92 82 01 	sts	0x0182, r1
			}
			if (GetBit(button, GREENBTN) == 0) {
 2fe:	82 fd       	sbrc	r24, 2
 300:	72 c0       	rjmp	.+228    	; 0x3e6 <Tick+0x198>
				State = Learn;
 302:	83 e0       	ldi	r24, 0x03	; 3
 304:	80 93 8d 01 	sts	0x018D, r24
				i = 0;
 308:	10 92 82 01 	sts	0x0182, r1
 30c:	6c c0       	rjmp	.+216    	; 0x3e6 <Tick+0x198>
			}
			break;
		case Visualize:
			LCD_DisplayString(1, "Hoike [Visual]  (R) Home");
 30e:	6f e3       	ldi	r22, 0x3F	; 63
 310:	71 e0       	ldi	r23, 0x01	; 1
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	1c df       	rcall	.-456    	; 0x14e <LCD_DisplayString>
			PORTB = (char)(microphone);
 316:	80 91 86 01 	lds	r24, 0x0186
 31a:	85 b9       	out	0x05, r24	; 5
//Functionality - Gets bit from a PINx
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number)
{
	return ( port & (0x01 << number) );
 31c:	80 91 85 01 	lds	r24, 0x0185
		case Visualize:
			LCD_DisplayString(1, "Hoike [Visual]  (R) Home");
			PORTB = (char)(microphone);
			// TODO: hash the microphone to RGBA values
			// Send to Uno via USART
			if (GetBit(button, 3) == 0) {
 320:	83 fd       	sbrc	r24, 3
 322:	61 c0       	rjmp	.+194    	; 0x3e6 <Tick+0x198>
				State = Init;
 324:	10 92 8d 01 	sts	0x018D, r1
 328:	5e c0       	rjmp	.+188    	; 0x3e6 <Tick+0x198>
			}
			break;
		case Learn:
			if (i <= 20) {
 32a:	80 91 82 01 	lds	r24, 0x0182
 32e:	85 31       	cpi	r24, 0x15	; 21
 330:	b0 f4       	brcc	.+44     	; 0x35e <Tick+0x110>
				unsigned char* str[80];
				strcpy(str, "Hoike [Learn] ");
 332:	8f e0       	ldi	r24, 0x0F	; 15
 334:	e8 e5       	ldi	r30, 0x58	; 88
 336:	f1 e0       	ldi	r31, 0x01	; 1
 338:	de 01       	movw	r26, r28
 33a:	11 96       	adiw	r26, 0x01	; 1
 33c:	01 90       	ld	r0, Z+
 33e:	0d 92       	st	X+, r0
 340:	8a 95       	dec	r24
 342:	e1 f7       	brne	.-8      	; 0x33c <Tick+0xee>
				strcat(str, &songNotes[notePosition]);
 344:	60 91 83 01 	lds	r22, 0x0183
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	6f 5f       	subi	r22, 0xFF	; 255
 34c:	7e 4f       	sbci	r23, 0xFE	; 254
 34e:	ce 01       	movw	r24, r28
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	7e d0       	rcall	.+252    	; 0x450 <strcat>
				LCD_DisplayString(1, str);
 354:	be 01       	movw	r22, r28
 356:	6f 5f       	subi	r22, 0xFF	; 255
 358:	7f 4f       	sbci	r23, 0xFF	; 255
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	f8 de       	rcall	.-528    	; 0x14e <LCD_DisplayString>
			}
			if (i > 20 && i <= 30) {
 35e:	80 91 82 01 	lds	r24, 0x0182
 362:	85 51       	subi	r24, 0x15	; 21
 364:	8a 30       	cpi	r24, 0x0A	; 10
 366:	50 f4       	brcc	.+20     	; 0x37c <Tick+0x12e>
				LCD_DisplayString(1, "(G) Back (R) Home (B) Next");
 368:	67 e6       	ldi	r22, 0x67	; 103
 36a:	71 e0       	ldi	r23, 0x01	; 1
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	ef de       	rcall	.-546    	; 0x14e <LCD_DisplayString>
				if (i >= 30) {
 370:	80 91 82 01 	lds	r24, 0x0182
 374:	8e 31       	cpi	r24, 0x1E	; 30
 376:	10 f0       	brcs	.+4      	; 0x37c <Tick+0x12e>
					i = 0;
 378:	10 92 82 01 	sts	0x0182, r1
				}
			}
			i++;
 37c:	80 91 82 01 	lds	r24, 0x0182
 380:	8f 5f       	subi	r24, 0xFF	; 255
 382:	80 93 82 01 	sts	0x0182, r24
			PORTB = song[learnPosition];
 386:	e0 91 84 01 	lds	r30, 0x0184
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	e5 5f       	subi	r30, 0xF5	; 245
 38e:	fe 4f       	sbci	r31, 0xFE	; 254
 390:	80 81       	ld	r24, Z
 392:	85 b9       	out	0x05, r24	; 5
//Functionality - Gets bit from a PINx
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number)
{
	return ( port & (0x01 << number) );
 394:	80 91 85 01 	lds	r24, 0x0185
					i = 0;
				}
			}
			i++;
			PORTB = song[learnPosition];
			if (GetBit(button, BLUEBTN) == 0) {
 398:	80 fd       	sbrc	r24, 0
 39a:	0f c0       	rjmp	.+30     	; 0x3ba <Tick+0x16c>
				if (learnPosition > 0) {
 39c:	90 91 84 01 	lds	r25, 0x0184
 3a0:	99 23       	and	r25, r25
 3a2:	41 f0       	breq	.+16     	; 0x3b4 <Tick+0x166>
					learnPosition--;
 3a4:	91 50       	subi	r25, 0x01	; 1
 3a6:	90 93 84 01 	sts	0x0184, r25
					notePosition -= 2;
 3aa:	90 91 83 01 	lds	r25, 0x0183
 3ae:	92 50       	subi	r25, 0x02	; 2
 3b0:	90 93 83 01 	sts	0x0183, r25
				}
				State = Learn;
 3b4:	93 e0       	ldi	r25, 0x03	; 3
 3b6:	90 93 8d 01 	sts	0x018D, r25
			}
			if (GetBit(button, REDBTN) == 0) {
 3ba:	83 ff       	sbrs	r24, 3
				State = Init;
 3bc:	10 92 8d 01 	sts	0x018D, r1
			}
			if (GetBit(button, GREENBTN) == 0) {
 3c0:	82 fd       	sbrc	r24, 2
 3c2:	11 c0       	rjmp	.+34     	; 0x3e6 <Tick+0x198>
				if (learnPosition < songLength) {
 3c4:	80 91 84 01 	lds	r24, 0x0184
 3c8:	90 91 00 01 	lds	r25, 0x0100
 3cc:	89 17       	cp	r24, r25
 3ce:	40 f4       	brcc	.+16     	; 0x3e0 <Tick+0x192>
					learnPosition++;
 3d0:	8f 5f       	subi	r24, 0xFF	; 255
 3d2:	80 93 84 01 	sts	0x0184, r24
					notePosition += 2;
 3d6:	80 91 83 01 	lds	r24, 0x0183
 3da:	8e 5f       	subi	r24, 0xFE	; 254
 3dc:	80 93 83 01 	sts	0x0183, r24
				}
				State = Learn;
 3e0:	83 e0       	ldi	r24, 0x03	; 3
 3e2:	80 93 8d 01 	sts	0x018D, r24
			}
			
			break;
	}
}
 3e6:	c0 56       	subi	r28, 0x60	; 96
 3e8:	df 4f       	sbci	r29, 0xFF	; 255
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	f8 94       	cli
 3ee:	de bf       	out	0x3e, r29	; 62
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	cd bf       	out	0x3d, r28	; 61
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	08 95       	ret

000003fa <main>:

int main(void)
{
	// PORT A used for microphone input
	DDRA = 0x00;
 3fa:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF;
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
 3fe:	82 b9       	out	0x02, r24	; 2
	
	// Port C used for button input
	// C0 is the back button
	// C1 is the restart button
	// C2 is the forward button
	DDRD = 0xFF;
 400:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 402:	1b b8       	out	0x0b, r1	; 11
	
	DDRC = 0xFF;
 404:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
 406:	18 b8       	out	0x08, r1	; 8
	
	DDRB = 0xFF;
 408:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xF3;
 40a:	83 ef       	ldi	r24, 0xF3	; 243
 40c:	85 b9       	out	0x05, r24	; 5
	
	ADC_init();
 40e:	19 df       	rcall	.-462    	; 0x242 <ADC_init>
		_avr_timer_cntcurr = _avr_timer_M;
	}
}

void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 410:	84 e6       	ldi	r24, 0x64	; 100
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	a0 e0       	ldi	r26, 0x00	; 0
 416:	b0 e0       	ldi	r27, 0x00	; 0
 418:	80 93 10 01 	sts	0x0110, r24
 41c:	90 93 11 01 	sts	0x0111, r25
 420:	a0 93 12 01 	sts	0x0112, r26
 424:	b0 93 13 01 	sts	0x0113, r27
	_avr_timer_cntcurr = _avr_timer_M;
 428:	80 93 88 01 	sts	0x0188, r24
 42c:	90 93 89 01 	sts	0x0189, r25
 430:	a0 93 8a 01 	sts	0x018A, r26
 434:	b0 93 8b 01 	sts	0x018B, r27
	DDRB = 0xFF;
	PORTB = 0xF3;
	
	ADC_init();
	TimerSet(100);
	TimerOn();
 438:	a4 de       	rcall	.-696    	; 0x182 <TimerOn>
	
	LCD_init();
 43a:	71 de       	rcall	.-798    	; 0x11e <LCD_init>
	
	State = Init;
 43c:	10 92 8d 01 	sts	0x018D, r1

	
    while(1)                                                                                                                                                                                          
    {
		Tick();
 440:	06 df       	rcall	.-500    	; 0x24e <Tick>
		while (!TimerFlag);	// Wait 1 sec
 442:	80 91 8c 01 	lds	r24, 0x018C
 446:	88 23       	and	r24, r24
 448:	e1 f3       	breq	.-8      	; 0x442 <main+0x48>
		TimerFlag = 0;
 44a:	10 92 8c 01 	sts	0x018C, r1

    }
 44e:	f8 cf       	rjmp	.-16     	; 0x440 <main+0x46>

00000450 <strcat>:
 450:	fb 01       	movw	r30, r22
 452:	dc 01       	movw	r26, r24
 454:	0d 90       	ld	r0, X+
 456:	00 20       	and	r0, r0
 458:	e9 f7       	brne	.-6      	; 0x454 <strcat+0x4>
 45a:	11 97       	sbiw	r26, 0x01	; 1
 45c:	01 90       	ld	r0, Z+
 45e:	0d 92       	st	X+, r0
 460:	00 20       	and	r0, r0
 462:	e1 f7       	brne	.-8      	; 0x45c <strcat+0xc>
 464:	08 95       	ret

00000466 <_exit>:
 466:	f8 94       	cli

00000468 <__stop_program>:
 468:	ff cf       	rjmp	.-2      	; 0x468 <__stop_program>
